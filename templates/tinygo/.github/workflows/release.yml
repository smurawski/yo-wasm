name: release
on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  build:
    name: Build release assets

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-go@v2

    - name: Install TinyGo
      run: |
        wget https://github.com/tinygo-org/tinygo/releases/download/v0.21.0/tinygo_0.21.0_amd64.deb
        sudo dpkg -i tinygo_0.21.0_amd64.deb
        echo "/usr/local/tinygo/bin" >> $GITHUB_PATH

    - name: Set the release version (tag)
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
    - name: Set the release version (main)
      if: github.ref == 'refs/heads/main'
      shell: bash
      run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV

    - name: Build release
      run: make release

    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: <%= moduleName %>.wasm
        path: target/wasm32-wasi/release/<%= moduleName %>.wasm

  publish:
    name: Push released module to OCI registry
    runs-on: ubuntu-latest
    needs: build
    steps:

    - name: Install wasm-to-oci
      run: |
        mkdir tools
        wget https://github.com/engineerd/wasm-to-oci/releases/download/v0.1.1/linux-amd64-wasm-to-oci -q -O ./tools/wasm-to-oci
        chmod +x ./tools/wasm-to-oci

    - name: Set the release version
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
    - name: Set the release version
      if: github.ref == 'refs/heads/main'
      run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV

    - name: Download release assets
      uses: actions/download-artifact@v1
      with:
        name: <%= moduleName %>.wasm
        path: ./assets

    # TODO: FILL IN THE << ... >> bit below

    # - name: Log into registry
    #   run: << your docker login equivalent here >>

    # - name: Publish to registry
    #   run: ./tools/wasm-to-oci push ./assets/<%= moduleName %>.wasm << your OCI reference here e.g. myname.myprovider.io/<%= moduleName %>:${RELEASE_VERSION} >>
